type Account = record { owner : principal; subaccount : opt vec nat8 };
type AuctionError = variant {
  NoBids;
  TooEarlyToBeginAuction : nat64;
  Unauthorized : text;
  BiddingTooSmall;
  AuctionNotFound;
};
type AuctionInfo = record {
  auction_time : nat64;
  auction_id : nat64;
  first_transaction_id : nat64;
  last_transaction_id : nat64;
  tokens_distributed : nat;
  cycles_collected : nat64;
  fee_ratio : float64;
};
type BatchTransferArgs = record { amount : nat; receiver : Account };
type BiddingInfo = record {
  caller_cycles : nat64;
  auction_period : nat64;
  last_auction : nat64;
  total_cycles : nat64;
  fee_ratio : float64;
};
type Interval = variant {
  PerHour;
  PerWeek;
  PerDay;
  Period : record { seconds : nat64 };
  PerMinute;
};
type Metadata = record {
  fee : nat;
  decimals : nat8;
  fee_to : principal;
  owner : principal;
  name : text;
  is_test_token : opt bool;
  symbol : text;
};
type Operation = variant {
  Approve;
  Burn;
  Mint;
  Auction;
  Transfer;
  Claim;
  TransferFrom;
};
type PaginatedResult = record { result : vec TxRecord; next : opt nat64 };
type Result = variant { Ok : AuctionInfo; Err : AuctionError };
type Result_1 = variant { Ok : nat64; Err : AuctionError };
type Result_2 = variant { Ok; Err : AuctionError };
type Result_3 = variant { Ok : vec nat64; Err : TxError };
type Result_4 = variant { Ok : nat; Err : TxError };
type Result_5 = variant { Ok : nat; Err : TransferError };
type Result_6 = variant { Ok; Err : TxError };
type StandardRecord = record { url : text; name : text };
type TokenInfo = record {
  holderNumber : nat64;
  deployTime : nat64;
  fee_to : principal;
  history_size : nat64;
  metadata : Metadata;
  cycles : nat64;
};
type TransactionStatus = variant { Failed; Succeeded };
type TransferArgs = record {
  to : Account;
  fee : opt nat;
  memo : opt vec nat8;
  from_subaccount : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};
type TransferError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TxError = variant {
  SelfTransfer;
  NothingToClaim;
  AccountNotFound;
  Duplicate : record { duplicate_of : nat64 };
  BadFee : record { expected_fee : nat };
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld : record { allowed_window_nanos : nat64 };
  AmountOverflow;
  InsufficientFunds : record { balance : nat };
  AmountTooSmall;
};
type TxRecord = record {
  to : Account;
  fee : nat;
  status : TransactionStatus;
  from : Account;
  memo : opt vec nat8;
  operation : Operation;
  timestamp : nat64;
  caller : principal;
  index : nat64;
  amount : nat;
};
type Value = variant { Int : int; Nat : nat; Blob : vec nat8; Text : text };
service : (Metadata, nat) -> {
  batch_transfer : (opt vec nat8, vec BatchTransferArgs) -> (Result_3);
  burn : (opt principal, opt vec nat8, nat) -> (Result_4);
  claim : (principal, opt vec nat8) -> (Result_4);
  get_claim_subaccount : (principal, opt vec nat8) -> (vec nat8) query;
  get_claimable_amount : (principal, opt vec nat8) -> (nat) query;
  get_holders : (nat64, nat64) -> (vec record { Account; nat }) query;
  get_token_info : () -> (TokenInfo) query;
  get_transaction : (nat64) -> (TxRecord) query;
  get_transactions : (opt principal, nat64, opt nat64) -> (
      PaginatedResult,
    ) query;
  get_user_transaction_count : (principal) -> (nat64) query;
  history_size : () -> (nat64) query;
  icrc1_balance_of : (Account) -> (nat) query;
  icrc1_decimals : () -> (nat8) query;
  icrc1_fee : () -> (nat) query;
  icrc1_metadata : () -> (vec record { text; Value }) query;
  icrc1_minting_account : () -> (opt Account) query;
  icrc1_name : () -> (text) query;
  icrc1_supported_standards : () -> (vec StandardRecord) query;
  icrc1_symbol : () -> (text) query;
  icrc1_total_supply : () -> (nat) query;
  icrc1_transfer : (TransferArgs) -> (Result_5);
  is_test_token : () -> (bool) query;
  list_subaccounts : () -> (vec record { vec nat8; nat }) query;
  mint : (principal, opt vec nat8, nat) -> (Result_4);
  owner : () -> (principal) query;
  set_fee : (nat) -> (Result_6);
  set_fee_to : (principal) -> (Result_6);
  set_name : (text) -> (Result_6);
  set_owner : (principal) -> (Result_6);
  set_symbol : (text) -> (Result_6);
  transfer : (TransferArgs) -> (Result_4);
  auction_info : (nat64) -> (Result);
  bid_cycles : (principal) -> (Result_1);
  bidding_info : () -> (BiddingInfo);
  get_min_cycles : () -> (nat64);
  run_auction : () -> (Result);
  set_auction_period : (Interval) -> (Result_2);
  set_controller : (principal) -> (Result_2);
  set_min_cycles : (nat64) -> (Result_2);
}