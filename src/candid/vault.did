type ApproveError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  AllowanceChanged : record { current_allowance : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  Expired : record { ledger_time : nat64 };
  InsufficientFunds : record { balance : nat };
};
type Deposit = record {
  shares_num : float64;
  canister_id : principal;
  eq_usd : float64;
  amount : float64;
};
type DepositArgs = record { fee : nat; token : text; amount : nat };
type Error = variant {
  CommonError;
  InternalError : text;
  UnsupportedToken : text;
  InsufficientFunds;
};
type PaginatedResult = record { result : vec TxRecord; next : opt nat64 };
type Record = variant {
  Withdraw : Withdraw;
  Lend : record {};
  Deposit : Deposit;
  Swap : Swap;
  Borrow : record {};
};
type Result = variant { Ok; Err : VaultError };
type Result_1 = variant { Ok : float64; Err : VaultError };
type Result_2 = variant { Ok : Swap; Err : VaultError };
type Result_3 = variant { Ok : Withdraw; Err : VaultError };
type SupportedToken = record { canister_id : principal; symbol : text };
type Swap = record {
  token0_amount : float64;
  token0 : principal;
  token1 : principal;
  token1_amount : float64;
  eq_usd : float64;
  pool_id : principal;
};
type SwapArgs = record {
  amountIn : text;
  zeroForOne : bool;
  amountOutMinimum : text;
};
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TxError = variant {
  SelfTransfer;
  NothingToClaim;
  AccountNotFound;
  Duplicate : record { duplicate_of : nat64 };
  BadFee : record { expected_fee : nat };
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld : record { allowed_window_nanos : nat64 };
  AmountOverflow;
  InsufficientFunds : record { balance : nat };
  AmountTooSmall;
};
type TxRecord = record { id : nat64; timestamp : nat64; "record" : Record };
type VaultConfig = record {
  deploy_time : nat64;
  owner : principal;
  name : text;
  supproted_protocol : opt vec principal;
  exchange_rate_canister : principal;
  supported_tokens : vec SupportedToken;
  symbol : text;
  shares_token : opt principal;
};
type VaultError = variant {
  InvalidTokenAllowance;
  SwapPoolError : Error;
  TokenAlreadySet;
  NotController;
  TokenNotSupported;
  ExchangeRateError;
  ICRC2ApproveError : ApproveError;
  InvalidWithdrawArgs;
  ICRC2TransferError : TransferFromError;
  SharesTokenError : TxError;
  InvalidConfiguration : record { text; text };
  AssetNotSupported;
  InsufficientTokenBalance;
  ZeroNav;
};
type VaultLedger = record { tokens : opt vec SupportedToken };
type VaultLedgerTokenAum = record {
  aum : float64;
  decimals : nat8;
  balance : float64;
  token_id : principal;
  price : float64;
};
type VaultLedgerTokensAum = record { datas : opt vec VaultLedgerTokenAum };
type Withdraw = record {
  canister_ids : vec principal;
  amounts : vec float64;
  eq_usds : vec float64;
  shares_nums : float64;
};
service : (VaultConfig) -> {
  approve : (principal, principal, nat) -> (Result);
  deposit : (principal, nat) -> (Result_1);
  deposit_from : (principal, DepositArgs) -> (Result);
  get_aum : () -> (VaultLedgerTokensAum);
  get_config : () -> (VaultConfig) query;
  get_ledger : () -> (VaultLedger) query;
  get_nav : () -> (float64);
  get_tx_records : (nat64, opt nat64) -> (PaginatedResult) query;
  pkg_version : () -> (text) query;
  set_shares_token : (principal) -> (Result);
  swap : (principal, principal, principal, SwapArgs) -> (Result_2);
  withdraw : (nat16) -> (Result_3);
  withdraw_from : (principal, DepositArgs) -> (Result);
}
