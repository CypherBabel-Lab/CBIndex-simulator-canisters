type Deposit = record { canister_id : principal; amount : nat };
type PaginatedResult = record { result : vec TxRecord; next : opt nat64 };
type Record = variant {
  Withdraw : Withdraw;
  Lend : record {};
  Deposit : Deposit;
  Swap : record {};
  Borrow : record {};
};
type Result = variant { Ok : float64; Err : VaultError };
type Result_1 = variant { Ok; Err : VaultError };
type Result_2 = variant { Ok : vec nat; Err : VaultError };
type SupportedToken = record { canister_id : principal; symbol : text };
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type TxError = variant {
  SelfTransfer;
  NothingToClaim;
  AccountNotFound;
  Duplicate : record { duplicate_of : nat64 };
  BadFee : record { expected_fee : nat };
  Unauthorized;
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld : record { allowed_window_nanos : nat64 };
  AmountOverflow;
  InsufficientFunds : record { balance : nat };
  AmountTooSmall;
};
type TxRecord = record { id : nat64; timestamp : nat64; "record" : Record };
type VaultConfig = record {
  deploy_time : nat64;
  owner : principal;
  name : text;
  supproted_protocol : opt vec principal;
  exchange_rate_canister : principal;
  supported_tokens : vec SupportedToken;
  symbol : text;
  shares_token : opt principal;
};
type VaultError = variant {
  InvalidTokenAllowance;
  TokenAlreadySet;
  NotController;
  TokenNotSupported;
  ExchangeRateError;
  InvalidWithdrawArgs;
  ICRC2TransferError : TransferFromError;
  SharesTokenError : TxError;
  InvalidConfiguration : record { text; text };
  AssetNotSupported;
  InsufficientTokenBalance;
  ZeroNav;
};
type VaultLedger = record { tokens : opt vec SupportedToken };
type Withdraw = record {
  canister_ids : vec principal;
  shares_percent : nat16;
  weights : vec nat16;
};
service : (VaultConfig) -> {
  deposit : (Deposit) -> (Result);
  get_aum : () -> (float64);
  get_config : () -> (VaultConfig) query;
  get_ledger : () -> (VaultLedger) query;
  get_nav : () -> (float64);
  get_tx_records : (nat64, opt nat64) -> (PaginatedResult) query;
  pkg_version : () -> (text) query;
  set_shares_token : (principal) -> (Result_1);
  withdraw : (Withdraw) -> (Result_2);
}
