type WithdrawArgs = 
 record {
   amount: nat;
   fee: nat;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: text;
 };
type Result = 
 variant {
   err: Error;
   ok: nat;
 };
type PasscodeManager = 
 service {
   balanceOf: (principal) -> (nat);
   deposit: (DepositArgs) -> (Result);
   depositFrom: (DepositArgs) -> (Result);
   destoryPasscode: (principal, principal, nat) -> (Result_1);
   getFactoryCid: () -> (principal) query;
   getTokenCid: () -> (principal) query;
   metadata: () ->
    (record {
       factoryCid: principal;
       passcodePrice: nat;
       tokenCid: principal;
     });
   requestPasscode: (principal, principal, nat) -> (Result_1);
   withdraw: (WithdrawArgs) -> (Result);
 };
type Error = 
 variant {
   CommonError;
   InsufficientFunds;
   InternalError: text;
   UnsupportedToken: text;
 };
type DepositArgs = 
 record {
   amount: nat;
   fee: nat;
 };
service : (principal, nat, principal) -> PasscodeManager
